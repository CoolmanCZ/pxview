<!doctype refentry PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [

<!-- Process this file with docbook-to-man to generate an nroff manual
     page: `docbook-to-man manpage.sgml > manpage.1'.  You may view
     the manual page with: `docbook-to-man manpage.sgml | nroff -man |
     less'.  A typical entry in a Makefile or Makefile.am is:

manpage.1: manpage.sgml
	docbook-to-man $< > $@

    
	The docbook-to-man binary is found in the docbook-to-man package.
	Please remember that if you create the nroff version in one of the
	debian/rules file targets (such as build), you will need to include
	docbook-to-man in your Build-Depends control field.

  -->

  <!-- Fill in your name for FIRSTNAME and SURNAME. -->
  <!ENTITY dhfirstname "<firstname>UWE</firstname>">
  <!ENTITY dhsurname   "<surname>STEINMANN</surname>">
  <!-- Please adjust the date whenever revising the manpage. -->
  <!ENTITY dhdate      "<date>April 28, 2003</date>">
  <!-- SECTION should be 1-8, maybe w/ subsection other parameters are
       allowed: see man(7), man(1). -->
  <!ENTITY dhsection   "<manvolnum>3</manvolnum>">
  <!ENTITY dhemail     "<email>uwe@steinmann.cx</email>">
  <!ENTITY dhusername  "Uwe Steinmann">
  <!ENTITY dhucpackage "<refentrytitle>PX_NEW3</refentrytitle>">
  <!ENTITY funcname    "PX_new3">

  <!ENTITY debian      "<productname>Debian</productname>">
  <!ENTITY gnu         "<acronym>GNU</acronym>">
  <!ENTITY gpl         "&gnu; <acronym>GPL</acronym>">
]>

<refentry>
  <refentryinfo>
    <address>
      &dhemail;
    </address>
    <author>
      &dhfirstname;
      &dhsurname;
    </author>
    <copyright>
      <year>2003</year>
      <holder>&dhusername;</holder>
    </copyright>
    &dhdate;
  </refentryinfo>
  <refmeta>
    &dhucpackage;

    &dhsection;
  </refmeta>
  <refnamediv>
    <refname>&funcname;</refname>

    <refpurpose>create new instance of Paradox file</refpurpose>
  </refnamediv>
  <refsynopsisdiv>
    <para>#include &lt;paradox.h&gt;</para>
		<para>pxdoc_t* &funcname;(void  (*errorhandler)(pxdoc_t *p, int type, const char *msg, void *para), void* (*allocproc)(pxdoc_t *p, size_t size, const char *caller), void* (*reallocproc)(pxdoc_t *p, void *mem, size_t size, const char *caller), void  (*freeproc)(pxdoc_t *p, void *mem), void *errorhandler_user_data)</para>
  </refsynopsisdiv>
  <refsect1>
    <title>DESCRIPTION</title>

    <para>Creates a new instance of a Paradox file. This function, PX_new(3)
		  or PX_new2(3)
		  must be called before any other functions. If the caller has its own
			error and memory management functions they can be passed.</para>
		<para>In opposition to PX_new2(3) this function has an extra parameter
		  <option>errorhandler_user_data</option> which is a pointer to
			user data which is passed to the error handler function as the
			fourth parameter. This could be used to pass e.g. a widget pointer
			where error message are to be output, or a context which otherwise had
			to passed to the error handler through a global variable.</para>

  </refsect1>
  <refsect1>
    <title>RETURN VALUE</title>
    <para>Returns a pointer to an internal representation of a Paradox file or
		  NULL on failure.</para>
  </refsect1>
  <refsect1>
    <title>SEE ALSO</title>

    <para>PX_new(3), PX_new2(3), PX_open_file(3), PX_open_fp(3)</para>

  </refsect1>
  <refsect1>
    <title>AUTHOR</title>

    <para>This manual page was written by &dhusername; &dhemail;.</para>

  </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->


